<html>
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>{{feature}} - Mocha test suite for polyfill-service</title>

	<!-- Test and expectation libraries -->
	<link rel="stylesheet" href="/test/libs/mocha/mocha.css" />
	<script src="/test/libs/mocha/mocha.js"></script>
	<script src="/test/libs/expect/index.js"></script>

	<!-- Initalise Mocha (overridden if running under Phantom with grunt-mocha) -->
	<script>mocha.setup('bdd')</script>

	{{#loadPolyfill}}
		<!-- Code under test -->
		<script src='/v1/polyfill.js?flags=gated{{#forceAlways}},always{{/forceAlways}}&amp;features={{#features}}{{feature}},{{/features}}'></script>
	{{/loadPolyfill}}

	<!-- Tests -->
	<script>
	function nameOf(fn) {
		return Function.prototype.toString.call(fn).match(/function\s*([^\s]*)\(/)[1];
	}

	{{#features}}
	describe('{{feature}}', function() {
		it('has testing suite', function() {
			expect(true).to.be(true);
		});
		{{#detect}}
		it('has feature detection', function() {
			expect({{{.}}}).to.be.ok();
		});
		{{/detect}}
		{{#tests}}
			{{{.}}}
		{{/tests}}
	});
	{{/features}}
	</script>
</head>
<body>

	<div id="mocha"></div>

	<script>

	// Given a test, get the first level suite that it is contained within
	// Not the top level, the first one down.
	function getFirstLevelSuite(test) {
		var parent = test.parent;

		while (parent && parent.parent.parent) {
			parent = parent.parent;
		}

		return parent.title;
	}

	// During the test run, surface the test results in Sauce Labs' preferred format
	function run() {
		var runner = mocha.run();
		var results = {
			passed: 0,
			failed: 0,
			total: 0,
			duration: 0,
			tests: [],
			failingSuites: {},
			testedSuites: [],
			uaString: window.navigator.userAgent || 'unknown'
		};
		runner.on('pass', function(test) {
			results.passed++;
			results.total++;
		});

		runner.on('fail', function(test, err) {

			// Get a set of all the suites with failing tests in them.
			if (test.parent) {
				results.failingSuites[getFirstLevelSuite(test)] = true;
			}

			results.failed++;
			results.total++;
			results.tests.push({
				name: test.fullTitle(),
				result: false,
				message: err.message,
				stack: err.stack
			});
		});

		runner.on('suite', function(suite) {
			results.testedSuites.push(suite.title);
		});

		runner.on('end', function() {

			// Discount one for the 'running the test suite' test
			results.passed--;

			window.global_test_results = results;
			if (parent && parent.receiveTestResults) {
				parent.receiveTestResults(
					"{{#features}}{{feature}},{{/features}}".split(",").slice(0, -1)
				, results);
			}
		});
	}

	// If using Phantom, test is kicked off by remote code injection.  If not, run automatically on load.
	if (!("PHANTOMJS" in window)) window.onload = run;

	</script>
</body>
</html>
